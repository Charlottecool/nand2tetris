class Tetris{
	field int score; //

	field int game_left; // distance from the Tetris's frame left side to screen's left side
	field int game_top; // distance from the Tetris's frame top side to screen's top side
	field int game_width; // width of Tetris's frame 
	field int game_height; // height of Tetris's frame 

	field int block_size; // Tetris's block size
	field int block0_x; // One of Tetris's blocks
	field int block0_y; // One of Tetris's blocks
	field int block1_x; // One of Tetris's blocks
	field int block1_y; // One of Tetris's blocks
	field int block2_x; // One of Tetris's blocks
	field int block2_y; // One of Tetris's blocks 
	field int block3_x; // One of Tetris's blocks
	field int block3_y; // One of Tetris's blocks

	field int direction; // the square's current direction: 
                        // 3=left, 4=right

    field int current_x, current_y; // location of current block

    field Array gameboard;
    field int f_height; 
    field int f_width; 

    field int rotation_offset_2x;

	constructor Tetris new(){
		var int i;
		var int j;
	
		let f_height = 24; 
    	let f_width = 10;
		let score = 0;
		let game_left = 200;
		let game_top = 8;
		let game_width = 101;
		let game_height = 241;
		let block_size = 10;
		let current_x = 4;
		let current_y = 0;
		
		let gameboard = Array.new(f_height*f_width);
		
		let i = 0;
		while(i < f_height){
			
			let j = 0;
			while(j < f_width){
				//let gameboard[(i*f_width) + j] = 0;
				do set_pos_state(j,i,false);
				let j = j + 1;
			}
			let i = i + 1;
		}

		do Random.setSeed(7);
		return this;

	}

	/** check (x,y) is T or F. */
	method boolean is_pos_filled(int x, int y){
		return gameboard[(y*f_width) + x];
	}

	/** based on the value put in, set the (x,y) to T or F. */ 
	method void set_pos_state(int x, int y, boolean value){
		let gameboard[(y*f_width) + x] = value;
		return;
	}

	/** Disposes this tetris. */
    method void dispose() {
    	do Memory.deAlloc(this);
    	return;
    }

	method void drawFrame(){
		do Screen.drawRectangle(game_left - 1, game_top - 1, game_left + game_width + 1, game_top + game_height + 1);
        do Screen.setColor(false); // draw innner frame with white
        do Screen.drawRectangle(game_left, game_top, game_left + game_width, game_top + game_height);
        do Screen.setColor(true); // draw outer frame with black
        return;
	}
	
	/** draw blocks which stop moving. */
	method void draw_prevblocks(){
		var int i;
		var int j;

		let i = 0;
		while(i < f_height){
			
			let j = 0;
			while(j < f_width){
				if(is_pos_filled(j,i)){
					do drawBlock(j,i);
				}
				let j = j + 1;
			}
			let i = i + 1;
		}
		return;
	}
	
	method void printScore(){
		do Output.moveCursor(0,0);
		do Output.printString("Score:");
        do Output.printInt(score);
        return;
	}

	method void drawBlock(int x, int y){
		var int x1, y1;
		let x1 = game_left + (block_size*x);
		let y1 = game_top + (block_size*y);
		do Screen.drawRectangle(x1+2, y1+2, x1+block_size, y1+block_size);
		return;
	}

	method void set_I(){
		let rotation_offset_2x = 3;
		let block0_x = 0;
		let block0_y = 1;
		let block1_x = 1;
		let block1_y = 1;
		let block2_x = 2;
		let block2_y = 1;
		let block3_x = 3;
		let block3_y = 1;
		return;
	}

	method void set_O(){
		let rotation_offset_2x = 1;
		let block0_x = 0;
		let block0_y = 0;
		let block1_x = 0;
		let block1_y = 1;
		let block2_x = 1;
		let block2_y = 0;
		let block3_x = 1;
		let block3_y = 1;
		return;
	}

	method void set_T(){
		let rotation_offset_2x = 2;
		let block0_x = 0;
		let block0_y = 1;
		let block1_x = 1;
		let block1_y = 0;
		let block2_x = 1;
		let block2_y = 1;
		let block3_x = 2;
		let block3_y = 1;
		return;
	}

	method void set_L(){
		let rotation_offset_2x = 2;
		let block0_x = 0;
		let block0_y = 1;
		let block1_x = 1;
		let block1_y = 1;
		let block2_x = 2;
		let block2_y = 1;
		let block3_x = 2;
		let block3_y = 0;
		return;
	}

	method void set_J(){
		let rotation_offset_2x = 2;
		let block0_x = 0;
		let block0_y = 0;
		let block1_x = 1;
		let block1_y = 0;		
		let block2_x = 2;
		let block2_y = 0;		
		let block3_x = 0;
		let block3_y = 1;	
		return;
	}

	method void set_S(){
		let rotation_offset_2x = 2;
		let block0_x = 0;
		let block0_y = 0;
		let block1_x = 1;
		let block1_y = 0;
		let block2_x = 1;
		let block2_y = 1;
		let block3_x = 2;
		let block3_y = 1;
		return;
	}

	method void set_Z(){
		let rotation_offset_2x = 2;
		let block0_x = 1;
		let block0_y = 0;
		let block1_x = 2;
		let block1_y = 0;
		let block2_x = 1;
		let block2_y = 1;
		let block3_x = 0;
		let block3_y = 1;
		return;
	}

	/** check if the block can fall. */
	method boolean can_fall(){
		var int x;
		var int y;
		var int max_y;
		let max_y = f_height - 1;
		
		// check below block 0
		let x = current_x + block0_x;
		let y = current_y + block0_y + 1;
		if ((y > max_y) | is_pos_filled(x,y)) {
			return false;
		}
		// check below block 1
		let x = current_x + block1_x;
		let y = current_y + block1_y + 1;
		if ((y > max_y) | is_pos_filled(x,y)) {
			return false;
		}
		// check below block 2
		let x = current_x + block2_x;
		let y = current_y + block2_y + 1;
		if ((y > max_y) | is_pos_filled(x,y)) {
			return false;
		}
		// check below block 3
		let x = current_x + block3_x;
		let y = current_y + block3_y + 1;
		if ((y > max_y) | is_pos_filled(x,y)) {
			return false;
		}
		return true;
	}

	/** generate new piece from the top and check whether can drop. */
	method void generate_piece(){
		var int ra;
		//generate random number 
		let current_x = 4;
		let current_y = 0;
		let ra = Random.randRange(7);
		//if chain pick blocks
		if (ra = 0) {do set_I(); }
		if (ra = 1) {do set_O(); }
		if (ra = 2) {do set_T(); }
		if (ra = 3) {do set_L(); }
		if (ra = 4) {do set_J(); }
		if (ra = 5) {do set_S(); }
		if (ra = 6) {do set_Z(); }
		return;
	}

	/** check whether blocks can move to the left. */
	method boolean can_movel(){
		var int x;
		var int y;
		if ((block0_x + current_x) = 0){
			return false;
		}
		if ((block1_x + current_x) = 0){
			return false;
		}
		if ((block2_x + current_x) = 0){
			return false;
		}
		if ((block3_x + current_x) = 0){
			return false;
		}
		
		// check left block 0
		let x = current_x + block0_x - 1;
		let y = current_y + block0_y;
		if (is_pos_filled(x,y)) {
			return false;
		}
		// check left block 1
		let x = current_x + block1_x - 1;
		let y = current_y + block1_y;
		if (is_pos_filled(x,y)) {
			return false;
		}
		// check left block 2
		let x = current_x + block2_x - 1;
		let y = current_y + block2_y;
		if (is_pos_filled(x,y)) {
			return false;
		}
		// check left block 3
		let x = current_x + block3_x - 1;
		let y = current_y + block3_y;
		if (is_pos_filled(x,y)) {
			return false;
		}
		return true;
	}

	/** check whether blocks can move to the right. */
	method boolean can_mover(){
		var int x;
		var int y;

		if ((block0_x + current_x) = (f_width - 1)){
			return false;
		}
		if ((block1_x + current_x) = (f_width - 1)){
			return false;
		}
		if ((block2_x + current_x) = (f_width - 1)){
			return false;
		}
		if ((block3_x + current_x) = (f_width - 1)){
			return false;
		}

		// check right block 0
		let x = current_x + block0_x + 1;
		let y = current_y + block0_y;
		if (is_pos_filled(x,y)) {
			return false;
		}
		// check right block 1
		let x = current_x + block1_x + 1;
		let y = current_y + block1_y;
		if (is_pos_filled(x,y)) {
			return false;
		}
		// check right block 2
		let x = current_x + block2_x + 1;
		let y = current_y + block2_y;
		if (is_pos_filled(x,y)) {
			return false;
		}
		// check right block 3
		let x = current_x + block3_x + 1;
		let y = current_y + block3_y;
		if (is_pos_filled(x,y)) {
			return false;
		}

		return true;
	}

	/** drop the block and piles and keypresses. */
	method void drop_block(){
		var char key;  // the key currently pressed by the user
		while(can_fall()){
			let key = Keyboard.keyPressed();
			
			if (key = 131 & can_rotate()) { do rotate(); }   // up arrow
	        if ((key = 130) & can_movel()) { let current_x = current_x - 1; }   // left arrow
	        if ((key = 132) & can_mover()) { let current_x = current_x + 1; }   // right arrow
			
			let current_y = current_y + 1;	

			do Screen.clearScreen();
			do drawFrame();
			do printScore();
			do draw_prevblocks();
			//let r = Random.randRange(18);
			do draw_piece(current_x,current_y);
			do Sys.wait(200);
		}
		return;
	}

	method void save_block(){
		do set_pos_state(current_x + block0_x, current_y + block0_y,true);
		do set_pos_state(current_x + block1_x, current_y + block1_y,true);
		do set_pos_state(current_x + block2_x, current_y + block2_y,true);
		do set_pos_state(current_x + block3_x, current_y + block3_y,true);
		return;
	}

	/** draw the moving blocks. */
	method void draw_piece(int x, int y){
		do drawBlock(x+block0_x, y+block0_y);
		do drawBlock(x+block1_x, y+block1_y);
		do drawBlock(x+block2_x, y+block2_y);
		do drawBlock(x+block3_x, y+block3_y);
		return;
	}

	/** check the block can rotate. */
	method boolean can_rotate(){
		var int x;
		var int y;

		// rotate block 0
		let x = -block0_y + rotation_offset_2x;
		let y = block0_x;
		if((x < 0) | (x > f_width) | (y < 0) | (y > f_height) | is_pos_filled(x,y)){
			return false;
		}

		// rotate block 1
		let x = -block1_y + rotation_offset_2x;
		let y = block1_x;
		if((x < 0) | (x > f_width) | (y < 0) | (y > f_height) | is_pos_filled(x,y)){
			return false;
		}

		// rotate block 2
		let x = -block2_y + rotation_offset_2x;
		let y = block2_x;
		if((x < 0) | (x > f_width) | (y < 0) | (y > f_height) | is_pos_filled(x,y)){
			return false;
		}

		// rotate block 3
		let x = -block3_y + rotation_offset_2x;
		let y = block3_x;
		if((x < 0) | (x > f_width) | (y < 0) | (y > f_height) | is_pos_filled(x,y)){
			return false;
		}
		
		return true;
	}

	/** Rotate the block follow the clock. */
	method void rotate(){
		var int x;
		var int y;

		// rotate block 0
		let x = block0_x;
		let y = block0_y;
		let block0_x = -y + rotation_offset_2x;
		let block0_y = x;

		// rotate block 1
		let x = block1_x;
		let y = block1_y;
		let block1_x = -y + rotation_offset_2x;
		let block1_y = x;

		// rotate block 2
		let x = block2_x;
		let y = block2_y;
		let block2_x = -y + rotation_offset_2x;
		let block2_y = x;

		// rotate block 3
		let x = block3_x;
		let y = block3_y;
		let block3_x = -y + rotation_offset_2x;
		let block3_y = x;

		return;
	}

	/**check every row to see if it is filled. */
	method boolean is_row_filled(int y){
		var int x;
		let x = 0;
		while(x < f_width){
			if (~is_pos_filled(x,y)){
				return false;
			}
			let x = x + 1;
		}
		return true;
	}
	
	/**loop through whole gameboard to check and erase filled rows. */
	method void handle_filled_rows(){
		var int y;
		let y = f_height - 1;
		while((0 < y) | (y = 0)){
			if (is_row_filled(y)){
				do erase_row(y);
			}
			let y = y - 1;
		}
		return;
	}

	/**erase rows. */
	method void erase_row(int y){
		var int x;
		while(y > 0){
			let x = 0;
			while(x < f_width){
				do set_pos_state(x,y,is_pos_filled(x,y-1));
				let x = x + 1;
			}
			let y = y - 1;
		}
		let x = 0;
		while(x < f_width){
			do set_pos_state(x,y,false);
			let x = x + 1;
		}
		return;
	}

    /** Runs the game: handles the user's inputs and moves the block accordingly */
    method void run() {
      	var int r;
      
        var boolean exit;
        let exit = false;

        while (~exit) {
        	do generate_piece();
        	do drop_block();
        	do save_block();
        	do handle_filled_rows();
        	//check every row to see if it is filled (starting from the bottom)
        	//if a row is filled
        	//    set all values to false
        	//    move all values above down a single row
        	//    add something to the score
          
        } 
        return;
    }
}